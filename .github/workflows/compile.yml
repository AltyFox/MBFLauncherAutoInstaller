name: Build Installer

on:
  push:
    branches:
    - main
    paths:
    - install.ps1
    - release.txt
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read release.txt if exists
      id: read_release
      run: |
        if (Test-Path release.txt) {
          $release_version = Get-Content release.txt -Raw | ForEach-Object { $_.Trim() }
          echo "release_version=$release_version" >> $env:GITHUB_ENV
        } else {
          echo "release_version=" >> $env:GITHUB_ENV
        }
      shell: pwsh

    - name: Get latest GitHub release
      id: latest_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            core.setOutput("latest", release.tag_name.replace(/^v/, ""));
          } catch (e) {
            core.setOutput("latest", "0.0.0");
          }

    - name: Compare versions
      id: compare_versions
      run: |
        function Compare-Version($a, $b) {
          $a_parts = $a.Split('.') | ForEach-Object { [int]$_ }
          $b_parts = $b.Split('.') | ForEach-Object { [int]$_ }
          for ($i=0; $i -lt [Math]::Max($a_parts.Count, $b_parts.Count); $i++) {
            $a_val = if ($i -lt $a_parts.Count) { $a_parts[$i] } else { 0 }
            $b_val = if ($i -lt $b_parts.Count) { $b_parts[$i] } else { 0 }
            if ($a_val -gt $b_val) { return 1 }
            if ($a_val -lt $b_val) { return -1 }
          }
          return 0
        }

        $release_version = "${{ env.release_version }}"
        $latest_version = "${{ steps.latest_release.outputs.latest }}"

        if ([string]::IsNullOrEmpty($release_version)) {
          echo "is_version=false" >> $env:GITHUB_ENV
        } else {
          $cmp = Compare-Version $release_version $latest_version
          if ($cmp -gt 0) {
            echo "is_version=true" >> $env:GITHUB_ENV
            echo "version=$release_version" >> $env:GITHUB_ENV
          } else {
            echo "is_version=false" >> $env:GITHUB_ENV
          }
        }
      shell: pwsh

    - name: Set version in install.ps1
      run: |
        $is_version = $env:is_version
        $version = $env:version
        $commit_id = (git rev-parse --short HEAD).Trim()

        $content = Get-Content -Raw install.ps1

        if ($is_version -eq "true") {
          $updated_content = $content -replace '\$version = ".*"', "`$version = `"$version`""
        } else {
          $updated_content = $content -replace '\$version = ".*"', "`$version = `"$commit_id`""
        }

        Set-Content -Path install.ps1 -Value $updated_content -Encoding UTF8
      shell: pwsh

    - name: Download favicon.png
      run: |
        Invoke-WebRequest -Uri "https://mbf.bsquest.xyz/favicon.png" -OutFile "favicon.png"
      shell: pwsh

    - name: Install ps2exe
      run: Install-Module -Name ps2exe -Force -Scope CurrentUser -AllowClobber
      shell: pwsh

    - name: Convert the PNG to an Icon using ImageMagick
      run: magick favicon.png favicon.ico

    - name: Compile installer.ps1 to installer.exe
      run: |
        $year = (Get-Date).Year
        Invoke-ps2exe -inputFile .\install.ps1 -outputFile .\MBF-Launcher-Installer.exe -verbose -iconFile .\favicon.ico -noConsole `
        -product "MBF-Launcher-Installer" `
        -copyright "$year" `
        -description "This automatically installs the drivers needed to talk to your Quest, and installs MBF Launcher to your headset"
      shell: pwsh

    - name: Upload all working files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MBF-Launcher-Working-Files
        path: ./

    - name: Create Release
      if: env.is_version == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.version }}
        release_name: Release ${{ env.version }}
        draft: false
        prerelease: false

    - name: Upload installer to release
      if: env.is_version == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./MBF-Launcher-Installer.exe
        asset_name: MBF-Launcher-Installer.exe
        asset_content_type: application/octet-stream
